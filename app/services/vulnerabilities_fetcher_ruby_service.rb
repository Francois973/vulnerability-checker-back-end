require "uri"
require "json"
require "net/http"
require "awesome_print"

BASE_GITHUB_URL = "https://api.github.com/graphql".freeze

QUERY = "
query($after: String, $ecosystem: SecurityAdvisoryEcosystem) {
  securityVulnerabilities(first: 100, after: $after, ecosystem: $ecosystem) {
    pageInfo {
      hasNextPage
      endCursor
    }
    totalCount
    nodes {
      vulnerableVersionRange
      firstPatchedVersion {
        identifier
      }
      package {
        name
        ecosystem
      }
      advisory {
        description
        ghsaId
        permalink
        summary
        publishedAt
        cvss {
          vectorString
          score
        }
      }
      severity
    }
  }
}
".freeze
class VulnerabilitiesFetcherRubyService
  attr_reader :ecosystem

  def initialize(ecosystem)
    @ecosystem = ecosystem
  end

  def call
    cursor = nil
    loop do
      response = request(cursor)
      cursor = response.dig("data", "securityVulnerabilities", "pageInfo", "endCursor")
      has_next_page = response.dig("data", "securityVulnerabilities", "pageInfo", "hasNextPage")
      vulnerabilities = response.dig("data", "securityVulnerabilities", "nodes")
      upsert_vulnerabilities(vulnerabilities)
      break unless has_next_page
    end
  end

  private

  def upsert_vulnerabilities(vulnerabilities)
    vulnerabilities.each do |v|
      ap params = {
        summary:               v["advisory"]["summary"], # summary
        details:               v["advisory"]["description"], # details
        stack:                 v["package"]["name"], # stack
        ghsaId:                v["advisory"]["ghsaId"], # ghsaId
        severity:              v["severity"], # severity
        ecosystem:, # ecosystem
        github_version_ranges: v["vulnerableVersionRange"],
        score_cvss:            v["advisory"]["cvss"]["score"],
        version_ranges:        prepare_versions(v["vulnerableVersionRange"]) # version
      }
      if vulnerability = Vulnerability.find_by(ghsaId: v["advisory"]["ghsaId"])
        vulnerability.update(params)
      else
        Vulnerability.create!(params)
      end
    end
  end

  def request(cursor)
    uri    = URI(BASE_GITHUB_URL)
    params = { query:     QUERY,
               variables: { after: cursor, ecosystem: "RUBYGEMS" } }

    headers = {
      "Authorization" => "Bearer #{ENV['GITHUB_TOKEN']}",
      "Content-Type"  => "application/json",
      "Accept"        => "application/json"
    }

    http         = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true
    response     = http.post(uri.path, params.to_json, headers)
    JSON.parse(response.body)
  end

  def prepare_versions(version_ranges)
    version_ranges = version_ranges.split(", ")
    version_ranges.map do |version_range|
      version_and_comparator = version_range.split(" ")
      {
        version:    version_and_comparator[1],
        comparator: version_and_comparator[0] == "=" ? "==" : version_and_comparator[0]
      }
    end
  end
end
