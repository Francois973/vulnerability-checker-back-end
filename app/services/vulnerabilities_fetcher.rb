require "uri"
require "json"
require "net/http"
require "awesome_print"

QUERY = "
query($after: String) {
  securityVulnerabilities(first: 100, after: $after) {
    pageInfo {
      hasNextPage
      endCursor
    }
    totalCount
    nodes {
      vulnerableVersionRange
      firstPatchedVersion {
        identifier
      }
      package {
        name
        ecosystem
      }
      advisory {
        description
        ghsaId
        permalink
        summary
        publishedAt
      }
      severity
    }
  }
}
"
class VulnerabilitiesFetcher
  def initialize; end

  def call
    cursor = nil
    cursors = []
    loop do
      response = request(cursor)
      cursor = response.dig("data", "securityVulnerabilities", "pageInfo", "endCursor")
      cursors << cursor
      has_next_page = response.dig("data", "securityVulnerabilities", "pageInfo", "hasNextPage")
      vulnerabilities = response.dig("data", "securityVulnerabilities", "nodes")
      upsert_vulnerabilities(vulnerabilities)
      break unless has_next_page
    end
    ap cursors.size
  end

  private

  def upsert_vulnerabilities(vulnerabilities)
    vulnerabilities.each do |v|
      ap params = {
        summary:   v["advisory"]["summary"], # summary
        details:   v["advisory"]["description"], # details
        stack:     v["package"]["name"], # stack
        ghsaId:    v["advisory"]["ghsaId"], # ghsaId
        severity:  v["severity"], # severity
        ecosystem: v["package"]["ecosystem"], # ecosystem
        version:   v["vulnerableVersionRange"] # version
      }

      if params[:ecosystem] == "RUBYGEMS" || params[:ecosystem] == "RubyGems"
        if vulnerability = Vulnerability.find_by(ghsaId: v["advisory"]["ghsaId"])
          vulnerability.update(params)
        else
          Vulnerability.create!(params)
        end
      end
    end
  end

  def request(cursor)
    uri    = URI("https://api.github.com/graphql")
    params = { query:     QUERY,
               variables: { after: cursor } }

    headers = {
      "Authorization" => "Bearer #{ENV['GITHUB_TOKEN']}",
      "Content-Type"  => "application/json",
      "Accept"        => "application/json"
    }
    http         = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true
    response     = http.post(uri.path, params.to_json, headers)
    JSON.parse(response.body)
  end
end
