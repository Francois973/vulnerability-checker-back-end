require "uri"
require "json"
require "net/http"
require "awesome_print"

class CallGithubService
  def initialize
    @main_query = "
    query($after: String) {
      securityVulnerabilities(first: 100, after: $after) {
        pageInfo {
          endCursor
        }
        totalCount
        nodes {
          vulnerableVersionRange
          firstPatchedVersion {
            identifier
          }
          package {
            name
          }
          advisory {
            description
            ghsaId
            permalink
            summary
            publishedAt
          }
          severity
        }
      }
    }
    "
    @cursors = []
  end

  def call
    Vulnerability.destroy_all if Rails.env.development?
    puts "starting fetching"
    total_pages = get_total_pages
    total_pages.times do
      get_vulnerabilities
    end
  end

  private

  def get_total_pages
    page_query = "
      query {
        securityVulnerabilities(first: 1){
          totalCount
        }
      }
    "
    data = call_github(page_query)

    total_pages = (data["data"]["securityVulnerabilities"]["totalCount"] / 100) + 1
    ap total_pages
    total_pages
  end

  def call_github(query)
    uri    = URI("https://api.github.com/graphql")
    params = { query:,
               variables: { after: @cursor } }

    headers = {
      "Authorization" => "Bearer #{ENV['GITHUB_TOKEN']}",
      "Content-Type"  => "application/json",
      "Accept"        => "application/json"
    }
    http         = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true
    response     = http.post(uri.path, params.to_json, headers)
    JSON.parse(response.body)

    # binding.pry
  end

  def get_vulnerabilities
    data = call_github(@main_query)

    # we manage our cursor
    @cursor = data["data"]["securityVulnerabilities"]["pageInfo"]["endCursor"]
    @cursors << @cursor

    # we get vulnerability datas
    datas = data["data"]["securityVulnerabilities"]["nodes"]
    insert_vulnerabilities_in_db(datas)

    ap @cursors.size
    ap "Page vluns created !"
  end

  def insert_vulnerabilities_in_db(datas)
    datas.each do |el|
      # binding.pry
      # ap el["severity"] # severity
      new_summary = el["advisory"]["summary"] # summary
      new_details = el["advisory"]["description"] # details
      new_stack = el["package"]["name"] # stack
      ap Vulnerability.create!(summary: new_summary, details: new_details, stack: new_stack)
    end
  end
end
