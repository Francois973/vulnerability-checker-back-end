class GetRepositoriesUserService
  HEADER = {
    'Authorization': "Bearer #{ENV['GITHUB_TOKEN']}"
  }.freeze

  def initialize(username)
    @username = username
  end

  def call
    uri = URI("https://api.github.com")

    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true

    response = http.get("/users/#{@username['username']}/repos", HEADER)
    if response.code == "200"
      repositories = JSON.parse(response.body)
      format_repositories(repositories)
    else
      puts "Failed with status code #{response.code}"
    end
  end

  private

  def format_repositories(results)
    repositories = []

    results.each do |repositorie|
      repositories << {
        name:      repositorie["name"],
        url:       repositorie["html_url"],
        languages: [get_languages(repositorie["name"],
                                  @username["username"])]
      }
    end
    repositories.each do |repositorie|
      options = { serializer: RepositorieSerializer }
      serializable_resource = ActiveModelSerializers::SerializableResource.new(repositorie, options)
      repositorie_json = serializable_resource.to_s.as_json
      ProjectChannel.broadcast_to(repositorie, type: "repository:found", payload: repositorie_json)
    end
  end

  def get_languages(name, username)
    uri = URI("https://api.github.com")

    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true

    response = http.get("/repos/#{username}/#{name}/languages", HEADER)
    JSON.parse(response.body)
  end
end
