module API
  module V1
    module Concerns
      module Pagination
        include Pagy::Backend

        extend ActiveSupport::Concern

        def paginate(serializer, resources, options: {})
          paginated_ressources = page_all ? resources : paginated_ressources(resource)
          meta_options = paginated_resources_meta(paginated_ressources)

          serializer.new(paginated_ressources, meta_options.merge(options).with_indifferent_access)
        end

        private

        def paginated_ressources
          per = par_param(resources)

          if resources.is_a?(Array)
            @pagy, @resources = pagy_array(resources, page: page_param, items: per)
          else
            @pagy, @ressources = pagy(resources, page: page_param, items: per)
          end

          @resources
        end

        def paginated_resources_meta(resources)
          {
            meta: {
              current_page: @pagy&.page || 1,
              next_page:    @pagy&.next,
              per_page:     @pagy&.items || resources&.length,
              prev_page:    @pagy&.prev,
              total_pages:  @pagy&.pages || 1,
              total_count:  @pagy&.count || resources&.length
            }
          }
        end

        def page_all?
          param[:page] == "all"
        end

        def per_param
          if page_all?
            resources.length.zero? ? 1 : resources.length
          end

          params[:per] || 5
        end

        def page_param
          page_all? || params[:page].blank? ? 1 : params[:page]
        end
      end
    end
  end
end
