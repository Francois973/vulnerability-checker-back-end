module Api
  module V1
    class ProjectsController < ApplicationController
      before_action :set_project, only: %i[destroy]
      def create
        @vulnerabilities = Vulnerability.all
        # binding.pry
        project = Project.new(project_params)
        if project.save
          find_url = project.url
          find_lock_file(find_url)
          # binding.pry
          render json: project, status: :created
        else
          render json: project.errors, status: :unprocessable_entity
        end
      end

      def destroy
        @project.destroy
      end

      private

      def find_lock_file(find_url)
        array = find_url.split("/")
        url = "https://api.github.com/#{array[3]}/#{array[4]}/REPO/contents/PATH"
        # binding.pry
        result = correct_format(url, array)
        # unless correct_format == URI("https://api.github.com/repos/#{array[3]}/#{array[4]}/contents/PATH".split("/").select do |element|
        #                                element.match(/(\w+).(lock)/)
        #                              end)
        #   uri = URI("https://api.github.com/repos/#{array[3]}/#{array[4]}/contents/#{correct_format}")
        # end
        res = Net::HTTP.get(result)
        response = JSON.parse(res)
        ap stacks_inside_lock_files = Base64.decode64(response["content"]).split(" ")
        comparisons(stacks_inside_lock_files)
      end

      def comparisons(stacks_inside_lock_files)
        stacks_inside_lock_files.each do |stack|
          vulns = []
          @vulnerabilities.each do |v|
            match = v["summary"].include?(stack)
            vulns.push(match) if match
          end
        end
      end

      def correct_format(url, array)
        good = URI(url.split("/").select do |element|
                     element.match(/(\w+).(lock)/)
                   end)

        URI("https://api.github.com/repos/#{array[3]}/#{array[4]}/contents/#{good}") if good
      end

      def set_project
        @project = Project.find(params[:id])
      end

      def project_params
        params.require(:project).permit(:name, :public, :status, :url)
      end
    end
  end
end
