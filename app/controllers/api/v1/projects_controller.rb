module Api
  module V1
    class ProjectsController < ApplicationController
      before_action :set_project, only: %i[destroy]
      def create
        @vulnerabilities = Vulnerability.all
        @project = Project.new(project_params)
        # binding.pry
        if @project.save
          find_url = @project.url
          find_lock_file(find_url)
          render json: @project, status: :created
        else
          render json: @project.errors, status: :unprocessable_entity
        end
      end

      def destroy
        @project.destroy
      end

      private

      # def create_list_project_vulnerabilities

      # end

      def find_lock_file(find_url)
        array = find_url.split("/")
        # binding.pry
        url = URI("https://raw.githubusercontent.com/#{array[3]}/#{array[4]}/master/Gemfile.lock")
        res = Net::HTTP.get(url)
        ap res.class
        response = JSON.parse(res.to_json)

        stacks_inside_lock_files = response.split("\n")
        ap stacks_inside_lock_files
        comparisons(stacks_inside_lock_files)
      end

      def comparisons(stacks_inside_lock_files)
        stacks_inside_lock_files.each do |stack|
          stack_toto = without_version(stack)
          vulnerability = @vulnerabilities.find_by(stack: stack_toto)
          list = List.create!(project: @project, vulnerability:) if vulnerability
        end
        # remove_dublicate_value(vulns_project)
      end

      def remove_dublicate_value(vulns_project)
        arr = vulns_project.uniq
        ap arr.size
      end

      def without_version(stack)
        stack = stack.strip
        if stack.include?("(")
          stack.split(" ").first
        else
          stack
        end
      end

      def set_project
        @project = Project.find(params[:id])
      end

      def project_params
        params.require(:project).permit(:name, :public, :status, :url)
      end
    end
  end
end
