class Project < ApplicationRecord
  has_and_belongs_to_many :vulnerabilities, join_table: "vulnerabilities_projects"
  # validates :name, presence: true
  validates :status, presence: true
  validates :url, presence: true

  before_create :set_uuid
  before_create :set_ecosystems

  def repo
    matches = %r{https://github\.com/(?<repo>[\w\-]+/[\w\-]+)}.match(url)
    matches["repo"]
  end

  def update_ecosystem_state(ecosystem, state)
    reload
    ecosystems[ecosystem] = state
    update(ecosystems:)
    ProjectChannel.broadcast_to(self, type: "ecosystem:update", payload: ecosystems)
    mark_project_as_complete!
  end

  def mark_project_as_complete!
    reload
    return unless ecosystems.all? { |_e, status| ["completed", "unavailable"].include?(status) }

    update(status: "completed")
    ProjectChannel.broadcast_to(self, type: "project:completed")
  end

  private

  def set_uuid
    self.uuid = SecureRandom.uuid
  end

  def set_ecosystems
    self.ecosystems = { "RUST" => "pending", "ERLANG" => "pending", "RUBYGEMS" => "pending", "NPM" => "pending" }
  end
end
