class GetRepositoriesUserJob < ApplicationJob
  queue_as :default

  HEADER = {
    'Authorization': "Bearer #{ENV["GITHUB_TOKEN"]}"
  }.freeze

  def perform(username)
    uri = URI("https://api.github.com")

    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true

    response = http.get("/users/#{username["username"]}/repos", HEADER)
    if response.code == "200"
      repositories = JSON.parse(response.body)
      format_repositories(repositories, username)
    else
      puts "Failed with status code #{response.code}"
    end
  end

  def format_repositories(results, username)
    repositories = []

    results.each do |repositorie|
     repositories << {
        name: repositorie["name"],
        url: repositorie["html_url"],
        languages: [get_languages(repositorie["languages_url"], repositorie["name"], username["username"])]
      }
    end
    repositories
    ap repositories
    # repositories.each do |repositorie|
    #   options = {serializer: RepositorieSerializer}
    #   serializable_resource = ActiveModelSerializers::SerializableResource.new(repositorie, options)
    #   repositorie_json = serializable_resource.as_json
    #   ProjectChannel.broadcast_to(project, type: "repository:found", payload: repositorie_json)
    # end
  end

  def get_languages(url, name, username)
    uri = URI("https://api.github.com")

    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true

    response = http.get("/repos/#{username}/#{name}/languages", HEADER)
    JSON.parse(response.body)
  end
end
