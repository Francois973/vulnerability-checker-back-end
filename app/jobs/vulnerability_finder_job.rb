class VulnerabilityFinderJob < ApplicationJob
  queue_as :default

  def perform(project_id, ecosystem, file_content)
    project = Project.find(project_id)
    parsed_lock = parse_lock(file_content, ecosystem)
    vulnerabilities = VulnerabilitiesFinderService.new(parsed_lock, ecosystem).call

    vulnerabilities.each do |vulnerability|
      sleep 0.5
      project.vulnerabilities << vulnerability
      options = {serializer: VulnerabilitySerializer}
      serializable_resource = ActiveModelSerializers::SerializableResource.new(vulnerability, options)
      vulnerability_json = serializable_resource.as_json
      ProjectChannel.broadcast_to(project, type: "vulnerability:found", payload: vulnerability_json)
    end

    project.update_ecosystem_state(ecosystem, "completed")
  end

  private

  def parse_lock(file_content, ecosystem)
    case ecosystem
    when "RUBYGEMS"
      parse_gemfile_lock(file_content)
    else
      puts "Not implemented"
    end
  end

  def parse_gemfile_lock(file_content)
    lockfile = Bundler::LockfileParser.new(file_content)
    arr_specs = []

    lockfile.specs.each do |s|
      arr_specs << {
        name: s.name,
        version: s.version
      }
    end

    arr_specs
  end
end
