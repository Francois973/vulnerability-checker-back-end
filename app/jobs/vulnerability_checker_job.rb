class VulnerabilityCheckerJob < ApplicationJob
  queue_as :default
  ECOSYSTEMS = ["RUBYGEMS", "ERLANG"]
  ECOSYSTEMS_FILES = {
    "RUBYGEMS" => "Gemfile.lock",
    "ERLANG" => "mix.lock"
  }

  def perform(id)
    project = Project.find(id)
    ECOSYSTEMS.each do |ecosystem|
      file_content = fetch_file(project, ecosystem)
    end
  end

  private

  def fetch_file(project, ecosystem)
    file = ECOSYSTEMS_FILES[ecosystem]
    project_array = project.url.split("/")
    url = URI("https://raw.githubusercontent.com/#{project_array[3]}/#{project_array[4]}/master/#{ECOSYSTEMS_FILES[ecosystem]}")
    response = Net::HTTP.get_response(url)
    payload = {}
    if response.code == "404"
      payload = { ecosystem: ecosystem, status: "unavailable" }
      project.update(ecosystems: project.ecosystems << payload)
    else
      payload = { ecosystem: ecosystem, status: "pending" }
      project.update(ecosystems: project.ecosystems << payload)
      VulnerabilityFinderJob.perform_later(project.id, ecosystem, response.body)
    end
    ProjectChannel.broadcast_to("project_#{project_id}", type: "ecosystem:update", payload: payload)
  end
end
