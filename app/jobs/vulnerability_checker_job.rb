class VulnerabilityCheckerJob < ApplicationJob
  queue_as :default

  ECOSYSTEMS_FILES = {
    "RUST" => ["Cargo.lock"],
    "ERLANG" => ["mix.lock"],
    "RUBYGEMS" => ["Gemfile.lock"],
    "NPM" => ["yarn.lock", "package-lock.json"]
  }

  def perform(id)
    @project = Project.find(id)
    ECOSYSTEMS_FILES.each do |key, ecosystems|
      @response = fetch_file(@project, ecosystems, key)
      @response.each do |r|
        array_specs = parse_lock(r, key)
        vulnerabilities = VulnerabilitiesFinderService.new(array_specs, key).call
        @project.update_ecosystem_state(key, "scanning")
        VulnerabilityFinderJob.perform_later(@project.id, key, r, vulnerabilities)
      end
  end
  end

  private

  def fetch_file(project, ecosystems, key)
    project_array = project.url.split("/")
    result = []
    ecosystems.each do |file|
      url = URI("https://raw.githubusercontent.com/#{project_array[3]}/#{project_array[4]}/master/#{file}")
      response = Net::HTTP.get_response(url)
      if response.code == "404"
        project.update_ecosystem_state(key, "unavailable")
      else
        result << response.body
      end
    end
    result
  end


  def parse_lock(file_content, ecosystems)
    case ecosystems
    when "RUST"
      ParserRustService.new(file_content).call
    when "ERLANG"
      ParserElixirService.new(file_content).call
    when "RUBYGEMS"
      ParserGemfileService.new(file_content).call
    when "NPM"
      ParserYarnLockService.new(file_content).call
    else
      puts "Not implemented"
    end
  end
end
