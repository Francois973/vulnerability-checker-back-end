require "test_helper"
require 'minitest/autorun'

class Api::V1::ProjectsControllerTest < ActionDispatch::IntegrationTest
  WebMock.allow_net_connect!

  test "should create project with valid params" do
    post api_v1_projects_path, params: { url: "https://github.com/francois973/rails-mediless"}, as: :json
    assert_response :success
    assert_response 201
    body = JSON.parse(response.body)
    assert body["uuid"]
    assert_equal body["url"], "https://github.com/francois973/rails-mediless"
    assert_equal body["status"], "New"
    assert_nil body["id"]
    assert_enqueued_with(job: VulnerabilityCheckerJob)
  end

  test "should destroy in database" do
    project = Project.create(name: "rails-mediless", url: "https://github.com/francois973/rails-mediless")
    delete_project = project.destroy

    assert delete_project
  end

  test "should find 4 vulnerabilities from a project" do
    @project = Project.create(url: "https://github.com/BetterCallBen/michelin-immobilier")
    @project.vulnerabilities = [Vulnerability.create(stack: "actionpack", severity: "HIGH", details: "Cross-site Scripting (XSS)", summary: "Cross-site Scripting in vditor", version_ranges: [{ version: "10.8.13", comparator: ">="}], ecosystem: "RUBYGEMS"),
    Vulnerability.create(stack: "actionview", severity: "LOW", details: "Problem with something about rails gem", summary: "whatever", version_ranges: [{ version: "10.2.0", comparator: ">="}], ecosystem: "RUBYGEMS"),
    Vulnerability.create(stack: "activerecord", severity: "LOW", details: "Problem with something about rails gem", summary: "whatever", version_ranges: [{ version: "10.2.0", comparator: ">="}], ecosystem: "RUBYGEMS"),
    Vulnerability.create(stack: "rack", severity: "LOW", details: "Problem with something about rails gem", summary: "whatever", version_ranges: [{ version: "10.2.0", comparator: ">="}], ecosystem: "RUBYGEMS")]

    get "http://localhost:3000/api/v1/projects/#{@project.uuid}", as: :json
    body = JSON.parse(response.body)
    assert 4, body["vulnerabilities"].size
  end


  test "should not find vulnerabilities with ERLANG ecosystem" do
    @project = Project.create(url: "https://github.com/BetterCallBen/michelin-immobilier")
    @project.vulnerabilities = [Vulnerability.create(stack: "actionpack", severity: "HIGH", details: "Cross-site Scripting (XSS)", summary: "Cross-site Scripting in vditor", version_ranges: [{ version: "10.8.13", comparator: ">="}], ecosystem: "RUBYGEMS"),
    Vulnerability.create(stack: "actionview", severity: "LOW", details: "Problem with something about rails gem", summary: "whatever", version_ranges: [{ version: "10.2.0", comparator: ">="}], ecosystem: "RUBYGEMS"),
    Vulnerability.create(stack: "activerecord", severity: "LOW", details: "Problem with something about rails gem", summary: "whatever", version_ranges: [{ version: "10.2.0", comparator: ">="}], ecosystem: "RUBYGEMS"),
    Vulnerability.create(stack: "rack", severity: "LOW", details: "Problem with something about rails gem", summary: "whatever", version_ranges: [{ version: "10.2.0", comparator: ">="}], ecosystem: "RUBYGEMS")]

    get "http://localhost:3000/api/v1/projects/#{@project.uuid}?ecosystem=ERLANG", as: :json
    body = JSON.parse(response.body)
    assert 0, body["vulnerabilities"].size
  end

  test "should find 3 vulnerabilities with LOW severity" do
    @project = Project.create(url: "https://github.com/BetterCallBen/michelin-immobilier")
    @project.vulnerabilities = [Vulnerability.create(stack: "actionpack", severity: "HIGH", details: "Cross-site Scripting (XSS)", summary: "Cross-site Scripting in vditor", version_ranges: [{ version: "10.8.13", comparator: ">="}], ecosystem: "RUBYGEMS"),
    Vulnerability.create(stack: "actionview", severity: "LOW", details: "Problem with something about rails gem", summary: "whatever", version_ranges: [{ version: "10.2.0", comparator: ">="}], ecosystem: "RUBYGEMS"),
    Vulnerability.create(stack: "activerecord", severity: "LOW", details: "Problem with something about rails gem", summary: "whatever", version_ranges: [{ version: "10.2.0", comparator: ">="}], ecosystem: "RUBYGEMS"),
    Vulnerability.create(stack: "rack", severity: "LOW", details: "Problem with something about rails gem", summary: "whatever", version_ranges: [{ version: "10.2.0", comparator: ">="}], ecosystem: "RUBYGEMS")]

    get "http://localhost:3000/api/v1/projects/#{@project.uuid}?ecosystem=RUBYGEMS&severity=LOW", as: :json
    body = JSON.parse(response.body)
    assert 3, body["vulnerabilities"].size
  end

end
