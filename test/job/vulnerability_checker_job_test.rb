require "test_helper"
require 'pry-byebug'
require 'net/http'

class VulnerabilityCheckerJobTest < ActiveJob::TestCase
  include ActionCable::TestHelper
  WebMock.allow_net_connect!

  test "should catch a RUBY & NPM ecosystems" do
    stub_request(:get, "https://raw.githubusercontent.com/francois973/rails-mediless/master/Gemfile.lock").
      to_return(status: 200, body: file_fixture("Gemfile_invalid.lock").read)

    stub_request(:get, "https://raw.githubusercontent.com/francois973/rails-mediless/master/yarn.lock").
      to_return(status: 200, body: file_fixture("yarn_valid.lock").read)

    stub_request(:get, "https://raw.githubusercontent.com/francois973/rails-mediless/master/package-lock.json").
      to_return(status: 200, body: file_fixture("package-lock_valid.json").read)

    project = Project.create(url: "https://github.com/francois973/rails-mediless", name: "rails-mediless")
    VulnerabilityCheckerJob.perform_now(project.id)

    project.reload
    assert_equal({"NPM"=>"scanning", "RUST"=>"unavailable", "ERLANG"=>"unavailable", "RUBYGEMS"=>"scanning"}, project.ecosystems)

    assert_broadcast_on(ProjectChannel.broadcasting_for(project), { "type" => "ecosystem:update",  "payload"=> { "RUST"=>"unavailable",  "ERLANG"=> "unavailable", "NPM"=>"scanning", "RUBYGEMS"=>"scanning" }})
  end

  test "should find ELIXIR ecosystem" do
    stub_request(:get, "https://raw.githubusercontent.com/StephaneRob/ancestry-ecto/master/mix.lock").
      to_return(status: 200, body: file_fixture("mix_valid.lock").read)

    stub_request(:get, "https://raw.githubusercontent.com/StephaneRob/ancestry-ect/master/Gemfile.lock").
      to_return(status: 404)

    stub_request(:get, "https://raw.githubusercontent.com/StephaneRob/ancestry-ect/master/yarn.lock").
      to_return(status: 404)

    stub_request(:get, "https://raw.githubusercontent.com/StephaneRob/ancestry-ect/master/package-lock.json").
      to_return(status: 404)

    project = Project.create(url: "https://github.com/StephaneRob/ancestry-ecto", name: "ancestry-ecto")

    project.reload
    VulnerabilityCheckerJob.perform_now(project.id)

    assert_equal({"NPM"=>"pending", "RUST"=>"pending", "ERLANG"=>"pending", "RUBYGEMS"=>"pending"}, project.ecosystems)

    assert_broadcast_on(ProjectChannel.broadcasting_for(project), { "type" => "ecosystem:update",  "payload"=> { "RUST"=>"unavailable", "ERLANG"=> "scanning", "NPM"=>"unavailable", "RUBYGEMS"=>"unavailable" }})
  end
end
