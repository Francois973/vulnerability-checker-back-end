require "test_helper"
require 'pry-byebug'
require 'net/http'

class VulnerabilityCheckerJobTest < ActiveJob::TestCase
  include ActionCable::TestHelper

  test "should catch a gemfile" do
    stub_request(:get, "https://raw.githubusercontent.com/francois973/rails-mediless/master/Gemfile.lock").
      to_return(status: 200, body: file_fixture("Gemfile_invalid.lock").read)

    stub_request(:get, "https://raw.githubusercontent.com/francois973/rails-mediless/master/yarn.lock").
      to_return(status: 200, body: file_fixture("Yarn_valid.lock").read )

    stub_request(:get, "https://raw.githubusercontent.com/francois973/rails-mediless/master/package-lock.json").
      to_return(status: 404, body: "" )

    project = Project.create(url: "https://github.com/francois973/rails-mediless", name: "rails-mediless")
    VulnerabilityCheckerJob.perform_now(project.id)
    # assert_enqueued_with(job: VulnerabilityFinderJob, args: [project.id, "RUBYGEMS", file_fixture("Gemfile_valid.lock").read])
    # project.reload
    # assert_equal project.ecosystems, { "YARN"=>"scanning", "RUBYGEMS"=>"scanning"}

    # assert_broadcast_on(ProjectChannel.broadcasting_for(project), { "type" => "ecosystem:update",  "payload"=> { "YARN"=>"scanning", "RUBYGEMS"=>"scanning" }})
    # assert_broadcast_on(ProjectChannel.broadcasting_for(project), { "type" => "ecosystem:update", "payload" => { "YARN"=>"scanning", "RUBYGEMS"=>"scanning" }})
  end


  # test 'should catch npm and yarn file' do
  #   stub_request(:get, "https://raw.githubusercontent.com/whoever/whatever/master/yarn.lock").
  #     to_return(status: 200, body: file_fixture("Yarn_valid.lock").read )

  #   stub_request(:get, "https://raw.githubusercontent.com/whoever/whatever/master/npm.lock").
  #     to_return(status: 404, body: "" )

  #   project = Project.create(url: "https://github.com/francois973/rails-mediless", name: "rails-mediless")
  #   project.reload

  #   assert_broadcast_on(ProjectChannel.broadcasting_for(project), { "type" => "ecosystem:update",  "payload"=> { "YARN"=>"pending", "RUBYGEMS"=>"scanning" }})
  #   assert_broadcast_on(ProjectChannel.broadcasting_for(project), { "type" => "ecosystem:update", "payload" => { "YARN"=>"pending", "RUBYGEMS"=>"scanning" }})
  # end
end
