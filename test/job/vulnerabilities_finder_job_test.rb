require "test_helper"

class VulnerabilityFinderJobTest < ActiveJob::TestCase
  include ActionCable::TestHelper

  test "should find vulnerability in gemfile.lock" do
    project = Project.create(url: "https://github.com/whoever/whatever")

    actioncable_vulnerability = Vulnerability.create!(
      stack: "actioncable",
      summary: "test",
      details: "test",
      version_ranges: [{version: "6.1.4", comparator: "<"}],
      ecosystem: "RUBYGEMS"
    )

    rexml_vulnerability = Vulnerability.create!(
      stack: "rexml",
      summary: "test",
      details: "test",
      version_ranges: [{version: "3.2.0", comparator: ">"}, {version: "3.3.0", comparator: "<="}],
      ecosystem: "RUBYGEMS"
    )
    vulnerabilities = [actioncable_vulnerability, rexml_vulnerability]

    VulnerabilityFinderJob.perform_now(project.id, "RUBYGEMS", file_fixture("Gemfile_invalid.lock").read, vulnerabilities)
    project.reload

    assert_equal project.vulnerabilities.length, 2
    assert_equal project.vulnerabilities.map(&:stack), ["actioncable", "rexml"]

    options = {serializer: VulnerabilitySerializer}
    actioncable_vulnerability_json = ActiveModelSerializers::SerializableResource.new(actioncable_vulnerability, options).as_json
    rexml_vulnerability_json = ActiveModelSerializers::SerializableResource.new(rexml_vulnerability, options).as_json

    assert_broadcast_on(ProjectChannel.broadcasting_for(project), { "type" => "vulnerability:found", "payload" => actioncable_vulnerability_json})
    assert_broadcast_on(ProjectChannel.broadcasting_for(project), { "type" => "vulnerability:found", "payload" => rexml_vulnerability_json})
  end

  test "should find vulnerabilities in yarn.lock" do
    project = Project.create(url: "https://github.com/whoever/whatever")

    babel_vulnerability = Vulnerability.create!(
      stack: "babel",
      summary: "test",
      details: "test",
      version_ranges: [{"version"=>"3.0", "comparator"=>">="}, {"version"=>"3.0.4", "comparator"=>"<"}],
      ecosystem: "NPM"
    )

    rexml_vulnerability = Vulnerability.create!(
      stack: "safemode",
      summary: "test",
      details: "test",
      version_ranges: [{"version"=>"1.3.2", "comparator"=>"<"}],
      ecosystem: "NPM"
    )

    vulnerabilities = [babel_vulnerability, rexml_vulnerability]

    VulnerabilityFinderJob.perform_now(project.id, "NPM", file_fixture("Gemfile_invalid.lock").read, vulnerabilities)
    project.reload

    assert_equal project.vulnerabilities.length, 2
    assert_equal project.vulnerabilities.map(&:stack), ["babel", "safemode"]

    options = {serializer: VulnerabilitySerializer}
    babel_vulnerability_json = ActiveModelSerializers::SerializableResource.new(babel_vulnerability, options).as_json
    rexml_vulnerability_json = ActiveModelSerializers::SerializableResource.new(rexml_vulnerability, options).as_json

    assert_broadcast_on(ProjectChannel.broadcasting_for(project), { "type" => "vulnerability:found", "payload" => babel_vulnerability_json})
    assert_broadcast_on(ProjectChannel.broadcasting_for(project), { "type" => "vulnerability:found", "payload" => rexml_vulnerability_json})
  end
end
