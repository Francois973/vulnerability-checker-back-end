require 'test_helper'

class VulnerabilitiesFinderTest < ActiveSupport::TestCase

  test "should find vulnerability on rails with a single version" do
    vulnerability = Vulnerability.create(stack: 'rails', details: "Problem with something about rails gem", summary: "whatever", version_ranges: [{ version: "5.2.0", comparator: "<"}], ecosystem: "RUBYGEMS")
    arr_specs = [
      { name: "rails", version: "5.1.5" }
    ]

    result = VulnerabilitiesFinderService.new(arr_specs, "RUBYGEMS").call
    assert result.size == 1
    assert result.first.stack == "rails"
  end

  test "shouldn't find vulnerability on rails with a single version" do
    vulnerability = Vulnerability.create(stack: 'rails', details: "Problem with something about rails gem", summary: "whatever", version_ranges: [{ version: "5.2.0", comparator: "<"}], ecosystem: "RUBYGEMS")
    arr_specs = [
      { name: "rails", version: "6.1.5" }
    ]
    result = VulnerabilitiesFinderService.new(arr_specs, "RUBYGEMS").call
    assert result.size == 0
  end

  test "should find vulnerability on rails with a multiple versions" do
    vulnerability = Vulnerability.create(stack: 'rails', details: "Problem with something about rails gem", summary: "whatever", version_ranges: [{ version: "5.2.0", comparator: ">="}, {version: "7.0.3", comparator: "<"}], ecosystem: "RUBYGEMS")
    arr_specs = [
      { name: "rails", version: "6.1.5" }
    ]
    result = VulnerabilitiesFinderService.new(arr_specs, "RUBYGEMS").call
    assert result.size == 1
    assert result.first.stack == "rails"
  end

  test "shouldn't find vulnerability on rails with a multiple versions" do
    vulnerability = Vulnerability.create(stack: 'rails', details: "Problem with something about rails gem", summary: "whatever", version_ranges: [{ version: "5.2.0", comparator: ">="}, {version: "7.0.3", comparator: "<"}], ecosystem: "RUBYGEMS")
    arr_specs = [
      { name: "rails", version: "10.1.5" }
    ]
    result = VulnerabilitiesFinderService.new(arr_specs, "RUBYGEMS").call
    assert result.size == 0
  end

  test "shouldn't find vulnerability on NPM" do
    vulnerability = Vulnerability.create(stack: "vditor", details: "Cross-site Scripting (XSS)", summary: "Cross-site Scripting in vditor", version_ranges: [{ version: "3.8.13", comparator: ">="}], ecosystem: "NPM")
    arr_specs = [
      { name: "vditor", version: "2.1.5" }
    ]
    result = VulnerabilitiesFinderService.new(arr_specs, "NPM").call
    assert result.size == 0
  end
end
