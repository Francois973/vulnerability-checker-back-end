require "test_helper"

class VulnerabilityTest < ActiveSupport::TestCase

  # Test valid project

  test 'valid vulnerability' do
    vulnerability = Vulnerability.create(summary: "Weight not properly refunded after EVM execution",
                                         details: "Impact\n\nPreviously, the worst case weight was always accounted as the block weight for all cases. In case of large EVM gas refunds, this can lead to block spamming attacks -- the adversary can construct blocks with transactions that have large amount of refunds or unused gases with reverts, and as a result inflate up the chain gas prices. This issue is fixed by properly refund unused weights after each EVM execution.\n\nThe impact of this issue is limited in that the spamming attack would still be costly for any adversary, and it has no ability to alter any chain state. \n\n### Patches\n\nThe issue is fixed in https://github.com/paritytech/frontier/pull/851\n\n### Workarounds\n\nNone.\n\n### References\n_Are there any links users can visit to find out more?_\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Frontier repo](https://github.com/paritytech/frontier/issues)\n* Email [Wei](mailto:wei@that.world)\n",
                                         stack: "PACKAGE")

    assert vulnerability.summary = "Weight not properly refunded after EVM execution"
    assert vulnerability.details = "Impact\n\nPreviously, the worst case weight was always accounted as the block weight for all cases. In case of large EVM gas refunds, this can lead to block spamming attacks -- the adversary can construct blocks with transactions that have large amount of refunds or unused gases with reverts, and as a result inflate up the chain gas prices. This issue is fixed by properly refund unused weights after each EVM execution.\n\nThe impact of this issue is limited in that the spamming attack would still be costly for any adversary, and it has no ability to alter any chain state. \n\n### Patches\n\nThe issue is fixed in https://github.com/paritytech/frontier/pull/851\n\n### Workarounds\n\nNone.\n\n### References\n_Are there any links users can visit to find out more?_\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Frontier repo](https://github.com/paritytech/frontier/issues)\n* Email [Wei](mailto:wei@that.world)\n"
    assert vulnerability.stack   = "PACKAGE"
    assert vulnerability.valid?
  end

  # Test presence of summary

  test 'invalid without summary' do
    vulnerability = Vulnerability.create(details: "Impact\n\nPreviously, the worst case weight was always accounted as the block weight for all cases. In case of large EVM gas refunds, this can lead to block spamming attacks -- the adversary can construct blocks with transactions that have large amount of refunds or unused gases with reverts, and as a result inflate up the chain gas prices. This issue is fixed by properly refund unused weights after each EVM execution.\n\nThe impact of this issue is limited in that the spamming attack would still be costly for any adversary, and it has no ability to alter any chain state. \n\n### Patches\n\nThe issue is fixed in https://github.com/paritytech/frontier/pull/851\n\n### Workarounds\n\nNone.\n\n### References\n_Are there any links users can visit to find out more?_\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Frontier repo](https://github.com/paritytech/frontier/issues)\n* Email [Wei](mailto:wei@that.world)\n",
                                         stack: "PACKAGE")

    refute vulnerability.valid?, 'user is valid without a name'
    assert_not_nil vulnerability.errors[:summary], 'no validation error for summary present'
  end

  # Test presence of details

  test 'invalid without details' do
    vulnerability = Vulnerability.create(summary: "Weight not properly refunded after EVM execution",
                                         stack: "PACKAGE")

    refute vulnerability.valid?, 'user is valid without a details'
    assert_not_nil vulnerability.errors[:details]
  end

  # Test presence of details

  test 'invalid without stack' do
    vulnerability = Vulnerability.create(summary: "Weight not properly refunded after EVM execution",
      details: "Impact\n\nPreviously, the worst case weight was always accounted as the block weight for all cases. In case of large EVM gas refunds, this can lead to block spamming attacks -- the adversary can construct blocks with transactions that have large amount of refunds or unused gases with reverts, and as a result inflate up the chain gas prices. This issue is fixed by properly refund unused weights after each EVM execution.\n\nThe impact of this issue is limited in that the spamming attack would still be costly for any adversary, and it has no ability to alter any chain state. \n\n### Patches\n\nThe issue is fixed in https://github.com/paritytech/frontier/pull/851\n\n### Workarounds\n\nNone.\n\n### References\n_Are there any links users can visit to find out more?_\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Frontier repo](https://github.com/paritytech/frontier/issues)\n* Email [Wei](mailto:wei@that.world)\n")

    refute vulnerability.valid?, 'user is valid without a details'
    assert_not_nil vulnerability.errors[:details]
  end
end
