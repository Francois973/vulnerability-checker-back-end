require "open-uri"
require "net/http"
require "pry-byebug"
require "awesome_print"
require "json"

# récuperer toutes les branches du repo
def all_branch_project
  url = URI("https://api.github.com/repos/adromel/rails-mediless/branches")
  params = {
    "Authorization" => "Bearer #{ENV['GITHUB_TOKEN']}"
  }
  list_branchs = request(url, params)
  commits = []
  list_branchs.each do |b|
    commits.push(b["commit"]["sha"])
  end

  get_all_commit_on_each_branch(commits, params)
end

# récuperer toutes les commit de chaque du branche
def get_all_commit_on_each_branch(commits)
  commits.each do |c|
    url = URI("https://api.github.com/repos/adromel/rails-mediless/commits?per_page=100&sha=#{c}")
    list_commits = request(url, params)
    arr = []
    list_commits.each do |l|
      arr.push(l["sha"])
      arr.push(l["commit"]["tree"]["sha"])
      l["parents"].each { |s| arr.push(s["sha"]) }
    end
    match_lock_file(arr)
  end
end

# lire tous les fichers modifié dans 1 commit
def match_lock_file(arr)
  arr.each do |a|
    url = URI("https://api.github.com/repos/adromel/rails-mediless/git/trees/#{a}")
    list_modified_files = request(url, params)
    array_lock_files = []
    list_modified_files["tree"].each do |lock_file|
      if lock_file["path"].match?(/(\w+).(lock)/)
        array_lock_files.push(lock_file["path"].match(/(\w+).(lock)/))
      end
    end
    ap array_lock_files
  end
  remove_dublicate_value(array_lock_files)
end

# Remove all double value
def remove_dublicate_value(array_lock_files)
  array_lock_files.uniq
end

# Common query
def query(url, params)
  res = Net::HTTP.get(url, params)
  JSON.parse(res)
end
